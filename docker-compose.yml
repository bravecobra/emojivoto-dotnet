version: '3'

services:
  web:
    image: bravecobra/emoji-ui-svc:stable
    profiles: ["app"]
    networks:
      monitoring: null
    container_name: emoji-ui-svc
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - EMOJISVC_HOST=http://emoji-svc
      - VOTINGSVC_HOST=http://voting-svc
      - UseMetricsExporter=default
      - UseTracingExporter=default
      - UseLogExporter=default
    ports:
      - "8080:80"
    depends_on:
      - voting-svc
      - emoji-svc
    extra_hosts:
      - "host.docker.internal:host-gateway"
      # - "k8s.local:192.168.65.2"
  emoji-svc:
    image: bravecobra/emoji-svc:stable
    profiles: ["app"]
    container_name: emoji-svc
    networks:
      monitoring: null
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - UseMetricsExporter=default
      - UseTracingExporter=default
      - UseLogExporter=default
    ports:
      - "8081:80"
      - "8181:81"
    extra_hosts:
      - "host.docker.internal:host-gateway"
      # - "k8s.local:192.168.65.2"
  voting-svc:
    image: bravecobra/emoji-voting-svc:stable
    container_name: voting-svc
    profiles: ["app"]
    networks:
      monitoring: null
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - FAILURE_RATE=10
      - ARTIFICIAL_DELAY=0
      - UseMetricsExporter=default
      - UseTracingExporter=default
      - UseLogExporter=default
    ports:
      - "8082:80"
      - "8282:81"
    extra_hosts:
      - "host.docker.internal:host-gateway"
      # - "k8s.local:192.168.65.2"
  vote-bot:
    image: bravecobra/emoji-votebot:stable
    container_name: votebot
    profiles: ["app"]
    networks:
      monitoring: null
    environment:
      - DOTNET_ENVIRONMENT=Production
      - WEB_HOST=http://web
      - VOTING_RATE=5000
      - UseMetricsExporter=default
      - UseTracingExporter=default
      - UseLogExporter=default
    depends_on:
      - web
    extra_hosts:
      - "host.docker.internal:host-gateway"
      # - "k8s.local:192.168.65.2"

  seq:
    image: datalust/seq:2023.1.9229
    container_name: seq
    profiles: ["individual"]
    networks:
      monitoring: null
    restart: always
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
    deploy:
      resources:
         limits:
            cpus: '0.500'
            memory: 500M
  jaeger:
    image: jaegertracing/all-in-one:1.45.0
    container_name: jaeger
    profiles: ["individual"]
    networks:
      monitoring: null
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      # - 5775:5775/udp
      # - 5778:5778
      # - 6832:6832/udp
      # - 9411:9411
      # - 14268:14268

  tempo:
    image: grafana/tempo:2.1.1
    container_name: tempo
    profiles: ["grafana", "otlp"]
    command: [ "-config.file=/etc/tempo.yaml" ]
    networks:
      monitoring: null
    volumes:
      - ./docker-compose/config/tempo/tempo.yaml:/etc/tempo.yaml
      - tempo:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "4317"   # otlp grpc
      - "4318"   # otlp http
      - "9411"   # zipkin

  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    profiles: ["grafana", "otlp"]
    networks:
      monitoring: null
    ports:
      - 3100:3100
    restart: on-failure
    volumes:
      - loki:/loki
      - ./docker-compose/config/loki/loki-config.yaml:/etc/loki/loki-config.yaml

    command: -config.file=/etc/loki/loki-config.yaml

  grafana:
    image: grafana/grafana:9.5.1
    container_name: grafana
    profiles: ["grafana", "otlp"]
    networks:
      monitoring: null
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - 3000:3000
    restart: on-failure
    volumes:
      - grafana:/var/lib/grafana
      - ./docker-compose/config/grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - loki
      - prometheus
      - tempo

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.43.1
    profiles: ["individual", "otlp", "grafana"]
    command:
      - '--web.enable-remote-write-receiver'
    networks:
      monitoring: null
    volumes:
      - prometheus:/prometheus
      - ./docker-compose/config/prometheus/prometheus.individual.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.76.1
    container_name: otel-collector
    profiles: ["otlp", "datadog"]
    command: ["--config=/etc/otel-collector-config.yml"]
    networks:
      monitoring: null
    ports:
      - "4317:4317"
      - "4318:4318"
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      # - "55679:55679" # zpages extension

  # aws-otel-collector:
  #   image: public.ecr.aws/aws-observability/aws-otel-collector:latest
  #   container_name: otel-collector
  #   command: ["--config=/etc/otel-agent-config.yaml"]
  #   # Add the AWS credentials in the docker-compose.override.yml file
  #   environment:
  #     - AWS_ACCESS_KEY_ID=<to_be_added>
  #     - AWS_SECRET_ACCESS_KEY=<to_be_added>
  #     - AWS_REGION=<to_be_added>

  #   volumes:
  #     - ./otel-config-aws.yaml:/etc/otel-agent-config.yaml
  #     # - ~/.aws:/root/.aws
  #   ports:
  #     - "4317:4317"

volumes:
  grafana:
  prometheus:
  promtail:
  loki:
  tempo:

networks:
  monitoring:
    driver: bridge